from aiogram import Router, types, F
from aiogram.enums import ChatType
import os

router = Router()

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
RP_ACTIONS = [
    "—É–¥–∞—Ä–∏—Ç—å", "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å", "–æ–±–Ω—è—Ç—å", "—É–∫—É—Å–∏—Ç—å",
    "–ø–æ–≥–ª–∞–¥–∏—Ç—å", "—Ç–æ–ª–∫–Ω—É—Ç—å", "—É—â–∏–ø–Ω—É—Ç—å", "—à–ª–µ–ø–Ω—É—Ç—å", "–ø–æ—â–µ—á–∏–Ω–∞",
    "–ø–Ω—É—Ç—å", "—Å—Ö–≤–∞—Ç–∏—Ç—å", "–∑–∞–ø–ª–∞–∫–∞—Ç—å", "–∑–∞—Å–º–µ—è—Ç—å—Å—è",
    "—É–¥–∏–≤–∏—Ç—å—Å—è", "—Ä–∞–∑–æ–∑–ª–∏—Ç—å—Å—è", "–∏—Å–ø—É–≥–∞—Ç—å—Å—è", "–ø–æ–¥–º–∏–≥–Ω—É—Ç—å", "—à–µ–ø–Ω—É—Ç—å"
]

# –ò–Ω—Ç–∏–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–¥–æ–±—Ä—ã–µ –∏ –∑–ª—ã–µ)
INTIMATE_ACTIONS = {
    "–¥–æ–±—Ä—ã–µ": {
        "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å": {"hp_change_target": +10, "hp_change_sender": -5},
        "–æ–±–Ω—è—Ç—å": {"hp_change_target": +15, "hp_change_sender": -5},
        "–ø–æ–≥–ª–∞–¥–∏—Ç—å": {"hp_change_target": +8, "hp_change_sender": -4},
        "—à–µ–ø–Ω—É—Ç—å": {"hp_change_target": +5, "hp_change_sender": -3},
        "—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ü–µ–ª—É–π": {"hp_change_target": +20, "hp_change_sender": -10},
        "—Å–µ–∫—Å": {"hp_change_target": +30, "hp_change_sender": +15},
    },
    "–∑–ª—ã–µ": {
        "—É–¥–∞—Ä–∏—Ç—å": {"hp_change_target": -10, "hp_change_sender": 0},
        "—É–∫—É—Å–∏—Ç—å": {"hp_change_target": -15, "hp_change_sender": 0},
        "—à–ª–µ–ø–Ω—É—Ç—å": {"hp_change_target": -8, "hp_change_sender": 0},
        "–ø–æ—â–µ—á–∏–Ω–∞": {"hp_change_target": -12, "hp_change_sender": 0},
    }
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è HP —è–∏—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_hp = {}

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HP —è–π—Ü–∞
HP_FILE = "hp.txt"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ HP —è–π—Ü–∞ –∏–∑ —Ñ–∞–π–ª–∞
def load_hp():
    if os.path.exists(HP_FILE):
        with open(HP_FILE, "r", encoding="utf-8") as file:
            for line in file:
                username, hp = line.strip().split(": ")
                user_hp[username] = int(hp)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HP —è–π—Ü–∞ –≤ —Ñ–∞–π–ª
def save_hp():
    with open(HP_FILE, "w", encoding="utf-8") as file:
        for username, hp in user_hp.items():
            file.write(f"{username}: {hp}\n")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ HP —è–π—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_hp(username):
    if username not in user_hp:
        user_hp[username] = 100  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ HP —è–π—Ü–∞
    return user_hp[username]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è HP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_hp(username, hp_change):
    current_hp = get_user_hp(username)
    new_hp = max(0, min(100, current_hp + hp_change))  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ HP –æ—Ç 0 –¥–æ 100
    user_hp[username] = new_hp
    save_hp()

# –ü–ª–∞–∫—Å–∞
@router.message(
        F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
        F.text.lower().contains('–∑–∞–ø–ª–∞–∫–∞—Ç—å')
)
async def cry(message: types.Message):
    sender = message.from_user
    sender_username = f"@{sender.username}" if sender.username else sender.first_name
    await message.reply(f"{sender_username} –∑–∞–ª–∞–∫–∞–ª. –°–µ–π—á–∞—Å –±—É–¥–µ—Ç –ª–∏–±–æ —Ä–µ–∑–Ω—è, –ª–∏–±–æ —ç—Ç–æ—Ç —á–µ–ª –ø—Ä–æ—Å—Ç–æ –ø–æ–ø–ª–∞—á–µ—Ç –∏ —É—Å–ø–∞–∫–æ–µ—Ç—Å—è. –ù–∞–¥–µ–µ–º—Å—è —á—Ç–æ –∫—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ—Ö–∏–ª–∏—Ç {sender_username}\n(–î–æ–≤–µ–ª–∏ –≤—ã –∫–ª–æ—É–Ω—ãü§° –±–µ–¥–Ω–æ–≥–æ —á–µ–ª–æ–±—Ä–µ–∫–∞)")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Ç–∏–º–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
@router.message(
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
    F.text.lower().startswith(tuple(set(INTIMATE_ACTIONS["–¥–æ–±—Ä—ã–µ"].keys()) | set(INTIMATE_ACTIONS["–∑–ª—ã–µ"].keys())))
)
async def handle_intimate_action(message: types.Message):
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
        target_username = f"@{target_user.username}" if target_user.username else target_user.first_name

        sender = message.from_user
        sender_username = f"@{sender.username}" if sender.username else sender.first_name

        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
        command_parts = message.text.lower().split()
        command = command_parts[0]
        additional_word = " ".join(command_parts[1:]) if len(command_parts) > 1 else ""

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
        if command.endswith("—Ç—å"):
            command_past = command[:-2] + "–ª"  # –£–±–∏—Ä–∞–µ–º "—Ç—å" –∏ –¥–æ–±–∞–≤–ª—è–µ–º "–ª"
        else:
            command_past = command  # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ "—Ç—å", –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å

        if command in INTIMATE_ACTIONS["–¥–æ–±—Ä—ã–µ"]:
            action_data = INTIMATE_ACTIONS["–¥–æ–±—Ä—ã–µ"][command]
            update_user_hp(target_username, action_data["hp_change_target"])
            update_user_hp(sender_username, action_data["hp_change_sender"])
            response = f"{sender_username} {command_past} {target_username} {additional_word}. {target_username} –ø–æ–ª—É—á–∞–µ—Ç +{action_data['hp_change_target']} HP, {sender_username} —Ç–µ—Ä—è–µ—Ç {abs(action_data['hp_change_sender'])} HP."
        elif command in INTIMATE_ACTIONS["–∑–ª—ã–µ"]:
            action_data = INTIMATE_ACTIONS["–∑–ª—ã–µ"][command]
            update_user_hp(target_username, action_data["hp_change_target"])
            response = f"{sender_username} {command_past} {target_username} {additional_word}. –£ {target_username} –æ—Å—Ç–∞–ª–æ—Å—å {get_user_hp(target_username)} HP."

        await message.reply(response)
        await message.delete()
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ HP
@router.message(
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
    F.text.lower().startswith("–º–æ—ë —Ö–ø")
)
async def check_hp_command(message: types.Message):
    sender = message.from_user
    sender_username = f"@{sender.username}" if sender.username else sender.first_name
    current_hp = get_user_hp(sender_username)
    await message.reply(f"{sender_username}, –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ HP: {current_hp}.")

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
@router.message(
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
    F.text.lower().contains("—Å–ø–∞—Å–∏–±–æ")
)
async def interactive_thanks(message: types.Message):
    await message.reply("–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä")

@router.message(
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
    F.text.lower().contains("–ª—é–±–ª—é")
)
async def interactive_love(message: types.Message):
    await message.reply("–Ø —Ç–æ–∂–µ –≤–∞—Å –ª—é–±–ª—é! ‚ù§Ô∏èü§°")


def setup_group_handlers(dp):
    dp.include_router(router)


@router.message(
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP]),
    F.text.lower().contains("—Ä–∞–¥–æ–≤–∞—Ç—å—Å—è")
)
async def interactive_love(message: types.Message):
    await message.reply("—Ö—É–ª–∏ —Ç—ã —Ä–∞–¥—É–µ—à—å—Å—è")